/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 *
 * apply plugin: 'war'
 */

/*
 * 구동순서
 *
 * 1 초기화 : gradle init
 * 2 build.gradle 변경
 * 3 이클립스환경 : gradle cleanEclipse eclipse
 * 4 WAR생성 : gradle war
 * 5 JAR생성 : gradle shadowJar
 * 			 - 원래는 jar를 이용하면 되지만 spring 관련된 파일을 함께 넣기 위해서 shadowJar를 씀
 * 			 - 주의사항 : shadowJar를 생성 할 때 반드시 "USE_LOCAL_LIB = false"로 설정 할 것
 gradle bootJar
 * 6 JAR파일 실행 방법 : java -jar hospital.jar
 *
 * 
 *
 * 모든 의존성 캐시를 갱신
 * gradle build --refresh-dependencies 
 */
import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

buildscript {
	ext {
		set('springCloudVersion', 'Greenwich.RELEASE')
		//springBootVersion = '2.2.6.RELEASE'
	}

	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
		//classpath "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		//classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}





plugins {
	id 'eclipse'
	id "org.springframework.boot" version "2.2.4.RELEASE"
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'war'
apply plugin: 'io.spring.dependency-management'

repositories {
	maven { url "https://jitpack.io" }
	flatDir { dirs "lib" }
	mavenCentral()
}



def USE_LOCAL_LIB 			= false
def TARGET_MAINCLASS 		= 'com.mssystech.Application'
def CONFIG 					= [
		MAIN_CLASS: 'com.mssystech.Application',
		CONTEXT_NAME: project.name,
		WAR_NAME: 'hospital',
		WAR_VERSION: '0.0.1',
		COMPANY: 'TYPHOON'
]

def TARGET_CLASSPATH 	= 'classes'
def TARGET_CLASSLIB 	= 'lib'

def SOURCE_DIR 			= [
		'src/main/java'
]
def RESOURCE_DIR = [
		'src/main/resources',
		'src/main/webapp'
]

def JAVA 				= [
		VERSION: '1.8',
		ENCODING: 'UTF-8'
]

def LIB_VERSION = [
		SPRING_BOOT: '2.2.6.RELEASE',
		SEVLET: '3.1.0', 		// Tomcat 8.x : sevlet3.1, Tomcat 9.x : 4.0
]



[compileJava, compileTestJava]*.options*.encoding = JAVA.ENCODING
sourceCompatibility = JAVA.VERSION
targetCompatibility = JAVA.VERSION


//api, implementation, compileOnly, runtimeOnly, testImplementation, testCompileOnly, testRuntimeOnly
dependencies {
	if (USE_LOCAL_LIB) {
		compile fileTree(dir: 'lib', include: ['*.jar'])
	} else {
		compile fileTree(dir: 'lib', include: ['*.jar'])
		compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.2.RELEASE'
		compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-ribbon', version: '2.2.2.RELEASE'
		// webclient
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-webflux', version: '2.2.6.RELEASE'
		compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12'

		compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.2.6.RELEASE'
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: LIB_VERSION.SPRING_BOOT
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: LIB_VERSION.SPRING_BOOT
		compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.2.6.RELEASE'

		// ANNOTATION
		compile group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

		// ORM(MYBATIS)
		//compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.5.4'

		compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
		//compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'
		compile group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: '2.1.2'



		implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
		implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.58'
		implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.3'


		// POI
		implementation group: 'org.apache.poi', name: 'poi', version: '4.1.0'
		compile group: 'org.apache.commons', name: 'commons-compress', version: '1.18'
		compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.0'
		compile group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '4.1.0'
		compile group: 'org.apache.xmlbeans', name: 'xmlbeans', version: '3.1.0'


		// CVS PARSER
		compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'

		// 캐시
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: '2.0.9.RELEASE'

		// 메일
		compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
		compile group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'

		// OKHTTP
		compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.2.0'

		// CRAWLER
		compile group: 'commons-httpclient', name: 'commons-httpclient', version:'3.0.1'
		compile group: 'xerces', name: 'xercesImpl', version: '2.9.1'
		compile group: 'dom4j', name: 'dom4j', version: '1.6.1'
		compile 'com.github.shineware:commons:1.0.1'

		compile group: 'org.bgee.log4jdbc-log4j2', name: 'log4jdbc-log4j2-jdbc4.1', version: '1.16'
		//annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"



	}
}

/*
 * ECLIPSE 소스 환경(초기화) 관련 작업
 * gradle cleanEclipse
 *
 */
sourceSets {
	SOURCE_DIR.forEach {
		def folderJava = new File(it)
		if (!folderJava.exists()) {
			folderJava.mkdirs()
		}
	}
	RESOURCE_DIR.forEach {
		def folderJava = new File(it)
		if (!folderJava.exists()) {
			folderJava.mkdirs()
		}
	}
	def folderClassPath = new File(TARGET_CLASSPATH)
	if (!folderClassPath.exists()) {
		folderClassPath.mkdirs()
	}
	def folderClassLib = new File(TARGET_CLASSLIB)
	if (!folderClassLib.exists()) {
		folderClassLib.mkdirs()
	}

	main {
		java {
			SOURCE_DIR.forEach {
				srcDir it
			}
		}
		resources {
			RESOURCE_DIR.forEach {
				srcDir it
			}
		}
	}
}

/*
 * ECLIPSE 관련 작업
 * gradle eclipse
 *
 *
 */
eclipse {
	classpath {
		defaultOutputDir = file(TARGET_CLASSPATH)
		file {
			whenMerged {
				def length 		= SOURCE_DIR.size();
				def next = 0;
				while (next < length) {
					entries.find { it.path == SOURCE_DIR[next]}.output = TARGET_CLASSPATH
					next += 1;
				}

				length = RESOURCE_DIR.size();
				next = 0;
				while (next < length) {
					entries.find { it.path == RESOURCE_DIR[next]}.output = TARGET_CLASSPATH
					next += 1;
				}
			}
		}
	}
}

jar {
	archiveName 	= "${CONFIG.WAR_NAME}.jar"
	manifest {
		attributes("Main-Class": CONFIG.MAIN_CLASS, "Implementation-Title": CONFIG.COMPANY, "Implementation-Version": CONFIG.WAR_VERSION)
		//attributes  'Title': CONFIG.COMPANY, 'Version': CONFIG.WAR_VERSION, 'Main-Class': CONFIG.MAIN_CLASS
	}
	dependsOn configurations.runtime
	from {
		configurations.compile.collect {it.isDirectory()? it: zipTree(it)}
		//configurations.runtime.collect {it.isDirectory() ? it : zipTree(it)}
	}
	from ('.') {
		exclude('src/')
		exclude('build/')
		exclude('gradle/')
		exclude('**/*.gradle')
		exclude('gradle*.*')
		exclude('lib/')
		exclude('lib_help/')
		exclude('classes/')
		exclude('*.lnk')
		exclude('*.pid')
		exclude('logs/')
		exclude('**/.*')
	}
	into '/'
}

war {
	archiveName 	= "${CONFIG.WAR_NAME}.war"
	manifest {
		attributes("Implementation-Title": CONFIG.COMPANY, "Implementation-Version": CONFIG.WAR_VERSION)
	}
	from ('.') {
		exclude('src/')
		exclude('build/')
		exclude('gradle/')
		exclude('**/*.gradle')
		exclude('gradle*.*')
		exclude('lib/')
		exclude('lib_help/')
		exclude('classes/')
		exclude('*.lnk')
		exclude('*.pid')
		exclude('logs/')
		exclude('**/.*')
		exclude('META-INF/*.SF')
		exclude('META-INF/*.DSA')
		exclude('META-INF/*.RSA')
		exclude('META-INF/spring.*')
		exclude('LICENSE.txt', 'NOTICE.txt', 'rootdoc.txt')
		exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
		exclude 'META-INF/NOTICE', 'META-INF/NOTICE.txt'
		exclude 'META-INF/LICENSE', 'META-INF/LICENSE.txt'
		exclude 'META-INF/DEPENDENCIES'
	}
	into '/'
}

shadowJar {
	//zip64 true
	//from("$buildDir/lib") {
	//    include '**'
	//}

	//mergeServiceFiles()
	//zip64 true
	//exclude 'META-INF/INDEX.LIST'
	//project.configurations.implementation.canBeResolved = true
	//configurations = [project.configurations.implementation]

	////////////////baseName = CONFIG.WAR_NAME
	//classifier 	= null
	//version 	= null
	////////////////mergeServiceFiles('META-INF/spring.*')
	mergeServiceFiles()
	append 'META-INF/spring.handlers'
	append 'META-INF/spring.schemas'
	append 'META-INF/spring.tooling'
	transform(PropertiesFileTransformer) {
		paths = ['META-INF/spring.factories' ]
		mergeStrategy = "append"
	}
	manifest {
		attributes("Main-Class": CONFIG.MAIN_CLASS, "Implementation-Title": CONFIG.COMPANY, "Implementation-Version": CONFIG.WAR_VERSION)
	}
	setArchiveFileName("${CONFIG.WAR_NAME}.jar")
	getDestinationDirectory().set(new File(projectDir, "./build"))
}
	